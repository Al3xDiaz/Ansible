# Linux only
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# To copy, left click and drag to highlight text in yellow, 
# once you release left click yellow text will disappear and will automatically be available in clibboard
# # Use vim keybindings in copy mode
setw -g mode-keys vi
# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"


#C-[key] Control + key
#M-[key] alt + key
#S-[key] shift + key
bind-key r (source-file ~/.tmux.conf && source ~/.bashrc) \; display-message "tmux.conf reloaded"

# Splitting terminals using | and -
bind C-n split-window -v
bind -n C-n split-window -h

# Moving windows using shift(<^v>)
bind -n S-Down select-pane -D #down
bind -n S-Left select-pane -L #left
bind -n S-Right select-pane -R #Right
bind -n S-Up select-pane -U #Up


bind -n M-Up resize-pane -U 10
bind -n M-Down resize-pane -D 10
bind -n M-Left resize-pane -L 20
bind -n M-Right resize-pane -R 20

bind C-l clear-history
set -g default-terminal "screen-256color"
set-option -g status 3
set-option -g status-style bg=default,fg=blue,bright

set -g status-format[0] "#{USER}@#(hostname -I | awk '{print $1}')"
set -ag status-format[0] "#[align=right fg=colour136]#S "
set -g status-format[1] ''
if-shell "ls .git" {
    #get colors in https://michurin.github.io/xterm256-color-picker/
    #GIT
    GIT_BRANCH='#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
    GIT_FILES_UNPUSHED='#(cd #{pane_current_path}; git cherry -v | wc -l || echo 0) '
    GIT_FILES_UNPULLED='#(cd #{pane_current_path}; git log --oneline --left-right --decorate origin/'$GIT_BRANCH'... | grep -i "^<"  | wc -l || echo 0) '
    # #files added
    set -g status-format[1] '#[fg=blue,bg=default,bright]    GIT -> Email: #(git config --global user.signinkey)'
    set -ag status-format[1] '#[align=right fg=colour136,bg=default,bright]**'$GIT_BRANCH'**'
    set -ag status-format[1] '#[fg=green,bg=default,bright] A:#(cd #{pane_current_path}; git status -s | grep -E "(\?|A).*$" | wc -l)'
    #files modified
    set -ag status-format[1] '#[fg=yellow,bg=default,bright] M:#(cd #{pane_current_path}; git status -s | grep -E "M.*$" | wc -l)'
    #files deleted
    set -ag status-format[1] '#[fg=red,bg=default,bright] D:#(cd #{pane_current_path}; git status -s | grep -E "D.*$" | wc -l)'
    #files unpulled
    set -ag status-format[1] '#[fg=colour136,bg=default,bright] ↓:'$GIT_FILES_UNPULLED
    #files unpushed
    set -ag status-format[1] '#[fg=colour136,bg=default,bright] ↑:'$GIT_FILES_UNPUSHED'#[fg=blue]<<-   '

} 
set -g status-format[2] '#[align=left,fg=blue] scale: [alt] + ( ↑ → ↓ ← )'
set -ag status-format[2] '#[align=right,fg=blue] move: [shift] + ( ↑ → ↓ ← )'
set -ag status-format[2] '#[align=centre,fg=colour136] new: [ctrl] + n | [crtl] + b + n -'
# {
#     # set -g status-fg black
#     set-option -ag status-left "#H • #(uname -r)"
#     set-option -g status on
#     set-option -g status-interval 1
#     set-option -g status-right-length 150
#     set-option -g status-right-style default
#     set-option -g status-right "%a%l:%M:%S %p %Y-%m-%d"
# }